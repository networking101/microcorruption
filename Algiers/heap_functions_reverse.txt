#0x2400 is start of heap
#0x2402 is size of heap
#0x2403 is flag to see if the entire heap is free
#0x2408 is start of first block. The prev node of this block will always point to itself. This will indicate the the function that this is the first block

#format of linked list is as follows
#Stucture:
#	+0x0 - previous node
#	+0x2 - next node
#	+0x4 - size (if LSB of size == 1, the memory region is being used.


malloc:
4464:  0b12           push	r11
4466:  c293 0424      tst.b	&0x2404					# this address indicates if we've mallocd before
446a:  0f24           jz	$+0x20 <malloc+0x26>
446c:  1e42 0024      mov	&0x2400, r14				# setup if this is first malloc
4470:  8e4e 0000      mov	r14, 0x0(r14)
4474:  8e4e 0200      mov	r14, 0x2(r14)
4478:  1d42 0224      mov	&0x2402, r13
447c:  3d50 faff      add	#0xfffa, r13
4480:  0d5d           add	r13, r13
4482:  8e4d 0400      mov	r13, 0x4(r14)
4486:  c243 0424      mov.b	#0x0, &0x2404

#start at front of linked list
malloc+26:
448a:  1b42 0024      mov	&0x2400, r11				# jump here for n+1 mallocs
448e:  0e4b           mov	r11, r14

malloc+2c:
4490:  1d4e 0400      mov	0x4(r14), r13
4494:  1db3           bit	#0x1, r13				# check if memory region is being used
4496:  2820           jnz	$+0x52 <malloc+0x84>
4498:  0c4d           mov	r13, r12				# curr memory region is free
449a:  12c3           clrc
449c:  0c10           rrc	r12
449e:  0c9f           cmp	r15, r12				# check if this block is big enough to hold malloc buffer
44a0:  2338           jl	$+0x48 <malloc+0x84>
44a2:  0b4f           mov	r15, r11				# this size is big enough, set up linked list to allocate memory starting at this region
44a4:  3b50 0600      add	#0x6, r11				# add space for previous node, next node, and size
44a8:  0c9b           cmp	r11, r12				# check if block size is big enough to allocate buffer
44aa:  042c           jc	$+0xa <malloc+0x50>			# jump if current block has enough space for linked list information also
44ac:  1dd3           bis	#0x1, r13				# There is enough space to allocate memory but not to split the block. Allocate space and return address pointer.
44ae:  8e4d 0400      mov	r13, 0x4(r14)
44b2:  163c           jmp	$+0x2e <malloc+0x7c>

# Here we found a block of memory with enough space to put our allocated buffer. Update the doubly linked lists with the newly allocated block of memory.
# r12 = size left of open block
# r14 = start of block
# r15 = size of memory allocation
malloc+50:
44b4:  0d4f           mov	r15, r13
44b6:  0d5d           add	r13, r13
44b8:  1dd3           bis	#0x1, r13
44ba:  8e4d 0400      mov	r13, 0x4(r14)
44be:  0d4e           mov	r14, r13
44c0:  3d50 0600      add	#0x6, r13
44c4:  0d5f           add	r15, r13
44c6:  8d4e 0000      mov	r14, 0x0(r13)				# move current block into prev node of next block
44ca:  9d4e 0200 0200 mov	0x2(r14), 0x2(r13)			# move next block into next node of next block
44d0:  0c8f           sub	r15, r12
44d2:  3c50 faff      add	#0xfffa, r12
44d6:  0c5c           add	r12, r12
44d8:  8d4c 0400      mov	r12, 0x4(r13)				# update remaining free size of next block
44dc:  8e4d 0200      mov	r13, 0x2(r14)				# update next block into current blocks next node

# get start of allocated block to return to calling function
malloc+7c:
44e0:  0f4e           mov	r14, r15
44e2:  3f50 0600      add	#0x6, r15
44e6:  0e3c           jmp	$+0x1e <malloc+0xa0>

# go to next open block of memory
malloc+84:
44e8:  0d4e           mov	r14, r13
44ea:  1e4e 0200      mov	0x2(r14), r14				# move to next block
44ee:  0e9d           cmp	r13, r14				# check if only allocated block took up all heap size
44f0:  0228           jnc	$+0x6 <malloc+0x92>
44f2:  0e9b           cmp	r11, r14				# check if we've cycled through all possible heap regions and couldn't find an open block big enough
44f4:  cd23           jnz	$-0x64 <malloc+0x2c>

# Not enough space for malloc
malloc+92:
44f6:  3f40 4a44      mov	#0x444a "Heap exausted; aborting.", r15
44fa:  b012 1a47      call	#0x471a <puts>
44fe:  3040 4044      br	#0x4440 <__stop_progExec__>
4502:  0f43           clr	r15

malloc+a0:
4504:  3b41           pop	r11
4506:  3041           ret





free:
4508:  0b12           push	r11
450a:  3f50 faff      add	#0xfffa, r15				# r15 is start of block structure (prev node)
450e:  1d4f 0400      mov	0x4(r15), r13				# r13 = size of allocated block
4512:  3df0 feff      and	#0xfffe, r13				# flip bit to indicated unallocated
4516:  8f4d 0400      mov	r13, 0x4(r15)

# check previous node, if block is unallocated, combine into 1 free block
451a:  2e4f           mov	@r15, r14				# r14 is previous block structure
451c:  1c4e 0400      mov	0x4(r14), r12				# r12 is previous blocks size
4520:  1cb3           bit	#0x1, r12				# check if previous block is allocated
4522:  0d20           jnz	$+0x1c <free+0x36>
4524:  3c50 0600      add	#0x6, r12				# previous block is unallocated, combine freed blocks into 1 free block
4528:  0c5d           add	r13, r12				# combine sizes
452a:  8e4c 0400      mov	r12, 0x4(r14)
452e:  9e4f 0200 0200 mov	0x2(r15), 0x2(r14)			# move curr block next into previous block next
4534:  1d4f 0200      mov	0x2(r15), r13				# r13 is start of next block structure
4538:  8d4e 0000      mov	r14, 0x0(r13)				# move previous block structure into next blocks prev
453c:  2f4f           mov	@r15, r15

# check next node, if block is unallocated, combine into 1 free block
free+36:
453e:  1e4f 0200      mov	0x2(r15), r14				# r14 is next block structure
4542:  1d4e 0400      mov	0x4(r14), r13
4546:  1db3           bit	#0x1, r13				# check if next block is allocated
4548:  0b20           jnz	$+0x18 <free+0x58>
454a:  1d5f 0400      add	0x4(r15), r13				# next block is unallocated, combine freed blocks into 1 free block
454e:  3d50 0600      add	#0x6, r13
4552:  8f4d 0400      mov	r13, 0x4(r15)
4556:  9f4e 0200 0200 mov	0x2(r14), 0x2(r15)
455c:  8e4f 0000      mov	r15, 0x0(r14)

free+58:
4560:  3b41           pop	r11
4562:  3041           ret
